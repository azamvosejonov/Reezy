"""initial_migration

Revision ID: 6c277646c0cb
Revises: 
Create Date: 2025-06-18 18:32:41.333532

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6c277646c0cb'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('test')
    op.drop_index(op.f('ix_call_participants_id'), table_name='call_participants')
    op.drop_table('call_participants')
    op.drop_index(op.f('ix_calls_id'), table_name='calls')
    op.drop_table('calls')
    op.add_column('posts', sa.Column('created_ip', sa.String(length=45), nullable=True, comment='IP address of the user who created the post'))
    op.add_column('posts', sa.Column('country_code', sa.String(length=2), nullable=True, comment='Country code of the post creator'))
    op.alter_column('posts', 'content',
               existing_type=sa.TEXT(),
               comment='Text content of the post',
               existing_comment='Text content of the post, nullable for media-only posts',
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('posts', 'content',
               existing_type=sa.TEXT(),
               comment='Text content of the post, nullable for media-only posts',
               existing_comment='Text content of the post',
               existing_nullable=True)
    op.drop_column('posts', 'country_code')
    op.drop_column('posts', 'created_ip')
    op.create_table('calls',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('calls_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('caller_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('receiver_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('call_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('call_sid', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['caller_id'], ['users.id'], name='calls_caller_id_fkey'),
    sa.ForeignKeyConstraint(['receiver_id'], ['users.id'], name='calls_receiver_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='calls_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_calls_id'), 'calls', ['id'], unique=False)
    op.create_table('call_participants',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('call_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('joined_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('left_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_muted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_video_on', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['call_id'], ['calls.id'], name=op.f('call_participants_call_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('call_participants_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('call_participants_pkey'))
    )
    op.create_index(op.f('ix_call_participants_id'), 'call_participants', ['id'], unique=False)
    op.create_table('test',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('test_pkey'))
    )
    # ### end Alembic commands ###
